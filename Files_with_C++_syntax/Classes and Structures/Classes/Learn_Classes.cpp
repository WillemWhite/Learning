#include <iostream>

/* В объектно-ориентированном программировании типы данных могут содержать не
только данные, но и функции, которые будут работать с этими данными. Для
определения такого типа данных в языке C++ используется ключевое слово class.
Использование ключевого слова class определяет новый пользовательский тип 
данных — класс. */

/* В языке C++ классы очень похожи на структуры, за исключением того, что 
они обеспечивают гораздо большую мощность и гибкость. Фактически, 
следующая структура и класс идентичны по функционалу: */

struct DateStruct
{
    int day;
    int month;
    int year;
};
 
class DateClass
{
    public: // по идее это caller
        int m_day;
        int m_month;
        int m_year;
    
    //Функции, определенные внутри класса, называются методами, доступ к ним
    //можно получить с помощью оператора выбора члена " . "

    void print() // определяем функцию-член
    {
        std::cout << m_day << "/" << m_month << "/" << m_year;
    }
    // По сути, связанный объект неявно передается методу. По этой причине 
    // его часто называют неявным объектом.
};
 
//Единственным существенным отличием здесь является public — ключевое слово в классе

/* Использование префикса m_ (англ. «m» = «members») для переменных-членов помогает 
различать переменные-члены от параметров функции или локальных переменных внутри 
методов класса. Это полезно по нескольким причинам:

   во-первых, когда мы видим переменную с префиксом m_, то мы понимаем, что работаем с переменной-членом класса;

   во-вторых, в отличие от параметров функции или локальных переменных, объявленных внутри функции, 
   переменные-члены объявляются в определении класса. Следовательно, если мы хотим знать, как объявлена 
   ​​переменная с префиксом m_, мы понимаем, что искать нужно в определении класса, а не внутри функции. */

/* ПРАВИЛО: Используйте ключевое слово struct для структур, используемых только для хранения данных. 
Используйте ключевое слово class для объектов, объединяющих как данные, так и функции. */

int main(int argc, char *argv[])
{
    /* Так же, как и объявление структуры, объявление класса не приводит к выделению 
    какой-либо памяти. Для использования класса нужно объявить переменную этого 
    типа класса: */
    DateClass today { 12, 11, 2018 }; // инициализируем переменную класса DateClass

    /* В языке C++ переменная класса называется экземпляром (или «объектом») класса.
    Точно так же, как определение переменной фундаментального типа данных (например,
    int x) приводит к выделению памяти для этой переменной, так же и создание 
    объекта класса (например, DateClass today) приводит к выделению памяти для 
    этого объекта. */
    
    today.m_day = 18; // используем оператор выбора членов для выбора переменной-члена m_day объекта today класса DateClass
    today.print(); // используем оператор выбора членов для вызова метода print() объекта today класса DateClass

    std::cin.get();
    return 0;
}